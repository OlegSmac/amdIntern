1. What code smells did you see?
I saw Rigility (Register method is too monolithic, because all actions, as checking requirements of speaker and 
calculation registration fee were done in one function. Therefore, in this case it will be difficult to make changes in this function)
Fragility (logic of several function is located nearby. Changed in one of them can break another and as a result
saving will not work correctly)
Immobility (Lists like ot, domains, emps are declared in the method, therefore we can't use them in other parts of project)
Needless Complexity (a lot of if else conditions. All exceptions can be described in the top of the function)
Opacity (Variables' names don't describe them, I spent several minutes to understand what is "ot" list about)

2. What problems did you think the Speaker class has?
Exceptions were written inside the Speaker class. They should be in separate directory.
Also, there are a lot of code nesting structures, which makes code difficult to read and understand.
Code use flags, like "good", "appr", which are not really needed. "good" is changed in several places and you should
monitor its changes throughout the code

3. Which clean code principles (or general programming principles) did it violate?
First of all - single responsibility principle. Register function was created too big with a log of nested code and intertwined logic
(validation, registration fee)
Functions should be small principle is violated with previous explanation 
Meaningful names principle (ot, domains, emps)
KISS (keep is simple stupid)

4. What refactoring techniques did you use?
I improved readability of the code by separating checking exceptions and function logic.
Also, I reduced code complexity by creating sub functions SpeakerMeetsRequirements(), IsAnyApprovedSession() and CalculateRegistrationFee()
I improved maintainability by creating separate function, which can be changed without affecting on other logic.
