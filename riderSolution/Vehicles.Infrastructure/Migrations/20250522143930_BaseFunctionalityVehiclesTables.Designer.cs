// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vehicles.Infrastructure;

#nullable disable

namespace Vehicles.Infrastructure.Migrations
{
    [DbContext(typeof(VehiclesDbContext))]
    [Migration("20250522143930_BaseFunctionalityVehiclesTables")]
    partial class BaseFunctionalityVehiclesTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Vehicles.Domain.Notifications.Models.CompanyNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyNotifications");
                });

            modelBuilder.Entity("Vehicles.Domain.Posts.Models.FavoriteList", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteLists");
                });

            modelBuilder.Entity("Vehicles.Domain.Posts.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Vehicles.Domain.Users.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Vehicles.Domain.Users.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Vehicles.Domain.Users.Models.RegularUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegularUsers");
                });

            modelBuilder.Entity("Vehicles.Domain.VehicleTypes.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Vehicles.Domain.VehicleTypes.Models.Car", b =>
                {
                    b.HasBaseType("Vehicles.Domain.VehicleTypes.Models.Vehicle");

                    b.Property<int>("Passengers")
                        .HasColumnType("int");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Vehicles.Domain.VehicleTypes.Models.Motorcycle", b =>
                {
                    b.HasBaseType("Vehicles.Domain.VehicleTypes.Models.Vehicle");

                    b.Property<bool>("HasSidecar")
                        .HasColumnType("bit");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("Vehicles.Domain.VehicleTypes.Models.Truck", b =>
                {
                    b.HasBaseType("Vehicles.Domain.VehicleTypes.Models.Vehicle");

                    b.Property<int>("MaxLoadKg")
                        .HasColumnType("int");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Vehicles.Domain.Notifications.Models.CompanyNotification", b =>
                {
                    b.HasOne("Vehicles.Domain.Users.Models.Company", "Company")
                        .WithMany("CompanyNotifications")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vehicles.Domain.Posts.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Vehicles.Domain.Users.Models.RegularUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vehicles.Domain.Posts.Models.FavoriteList", b =>
                {
                    b.HasOne("Vehicles.Domain.Posts.Models.Post", "Post")
                        .WithMany("FavoriteLists")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vehicles.Domain.Users.Models.RegularUser", "User")
                        .WithMany("FavoriteLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vehicles.Domain.Posts.Models.Post", b =>
                {
                    b.HasOne("Vehicles.Domain.Users.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vehicles.Domain.VehicleTypes.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vehicles.Domain.VehicleTypes.Models.Car", b =>
                {
                    b.HasOne("Vehicles.Domain.VehicleTypes.Models.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("Vehicles.Domain.VehicleTypes.Models.Car", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vehicles.Domain.VehicleTypes.Models.Motorcycle", b =>
                {
                    b.HasOne("Vehicles.Domain.VehicleTypes.Models.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("Vehicles.Domain.VehicleTypes.Models.Motorcycle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vehicles.Domain.VehicleTypes.Models.Truck", b =>
                {
                    b.HasOne("Vehicles.Domain.VehicleTypes.Models.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("Vehicles.Domain.VehicleTypes.Models.Truck", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vehicles.Domain.Posts.Models.Post", b =>
                {
                    b.Navigation("FavoriteLists");
                });

            modelBuilder.Entity("Vehicles.Domain.Users.Models.Company", b =>
                {
                    b.Navigation("CompanyNotifications");
                });

            modelBuilder.Entity("Vehicles.Domain.Users.Models.RegularUser", b =>
                {
                    b.Navigation("FavoriteLists");
                });
#pragma warning restore 612, 618
        }
    }
}
